/*
Copyright 2020 The OpenYurt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openyurtio/yurt-app-manager-api/pkg/yurtappmanager/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// YurtAppSetLister helps list YurtAppSets.
// All objects returned here must be treated as read-only.
type YurtAppSetLister interface {
	// List lists all YurtAppSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.YurtAppSet, err error)
	// YurtAppSets returns an object that can list and get YurtAppSets.
	YurtAppSets(namespace string) YurtAppSetNamespaceLister
	YurtAppSetListerExpansion
}

// yurtAppSetLister implements the YurtAppSetLister interface.
type yurtAppSetLister struct {
	indexer cache.Indexer
}

// NewYurtAppSetLister returns a new YurtAppSetLister.
func NewYurtAppSetLister(indexer cache.Indexer) YurtAppSetLister {
	return &yurtAppSetLister{indexer: indexer}
}

// List lists all YurtAppSets in the indexer.
func (s *yurtAppSetLister) List(selector labels.Selector) (ret []*v1alpha1.YurtAppSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.YurtAppSet))
	})
	return ret, err
}

// YurtAppSets returns an object that can list and get YurtAppSets.
func (s *yurtAppSetLister) YurtAppSets(namespace string) YurtAppSetNamespaceLister {
	return yurtAppSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// YurtAppSetNamespaceLister helps list and get YurtAppSets.
// All objects returned here must be treated as read-only.
type YurtAppSetNamespaceLister interface {
	// List lists all YurtAppSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.YurtAppSet, err error)
	// Get retrieves the YurtAppSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.YurtAppSet, error)
	YurtAppSetNamespaceListerExpansion
}

// yurtAppSetNamespaceLister implements the YurtAppSetNamespaceLister
// interface.
type yurtAppSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all YurtAppSets in the indexer for a given namespace.
func (s yurtAppSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.YurtAppSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.YurtAppSet))
	})
	return ret, err
}

// Get retrieves the YurtAppSet from the indexer for a given namespace and name.
func (s yurtAppSetNamespaceLister) Get(name string) (*v1alpha1.YurtAppSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("yurtappset"), name)
	}
	return obj.(*v1alpha1.YurtAppSet), nil
}
